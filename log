# So.  Brainstorming.

## Fri Oct  4 18:43:07 EDT 2019
I sould start with nothning.  My orienteering game "wander" (that I wrote back many years in OCaml, a language that seems to be in vogue among some financial institutions and among theorem-provers in costructive mathematics) would fit the bill.  You start with nothing.  You run around and find eight markers (by running through them) and then you're done.

You end up with nothing.

Not quite.  You do start with a map.  It has all the markers on it, and the landscape, but it doesnt tell you where you are on it.  So that's the first thing to find out.

I guess you could start out without the map.  Maybe find it along the way?  Seem difficult.  One of the real hallmarks of that game was that it was extremely easy to get lost, even *with* the map.

I programmed that game on a square grid.

Now my other old game-like thing was a map generator.  I didn't use it in wander, but I've always thought I wanted to use it for this game.  I didn't because I had a hard enough time with the language and openGL.  That map was also on a suaare grid.  But I might like to redo it on a triangle grid -- for no reason other than that 3D graphics technology seems to ilke triangle meshes.

And I suspect that whatever I do this weekend, I'll be thinking of rewriting my orienteering game with more convincing landscape.  And if I do something else I'll find myself regretting that I didn't do this.


# Fri Oct  4 18:53:31 EDT 2019

The main projecte work so far would seem to be the fractal landscape generation.  I could bound the game by having it take place on an island.  I'd have to add serious amounts of water and coastline to the map generator then.  But the actual effort of walking through the map would be easier.  And the rivers would yield a natural maze.  I could even (if time permits) implement a few bridges for variety and trees to obfuscate the view.

Is this getting too ambitious for a weekend?  This as well as a fractal recursive fragmentation and recombining triangular tiles?

The triangle meshes could be a pair of rectangular arrays -- one for up-pointing triangles, and one for down-pointing triangles.  And originally, I had a lot of trouble with getting all the tiles to fit together properly.  But I could do some unit tests on them, which is what I eventually did with the square arrays anyway.

I have a feeling that there will be fewer different special cases with triangles than with the squares I once used.



